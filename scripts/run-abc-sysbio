#!/usr/bin/python2.7

import sys
sys.path.insert (0, '..')
sys.path.insert (0, '../../cuda-sim/')
print sys.path

import matplotlib
matplotlib.use('Agg')

import numpy
import sys
import re
import argparse

from abcsysbio import parse_info
from abcsysbio import data
from abcsysbio import abcsmc
from abcsysbio import input_output
from abcsysbio import checkInputArguments
from abcsysbio import kernels
from abcsysbio import euclidian

from cudasim.solvers.python import model_py
from cudasim.solvers.c import model_c

sys.path.insert(0, ".")


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="""
    """)

    # Input options
    parser.add_argument('--infile', '-i',
                        help="declaration of the input file. This input file has to be provided to run the program")
    parser.add_argument('--localcode', '-lc',
                        help='do not import model from sbml intead use a local .py, .hpp/.cpp or .cu file',
                        action='store_true')

    # Algorithmic options
    parser.add_argument('--setseed', '-sd',
                        help="seed the random number generator in numpy with an integer eg -sd=2, --setseed=2")
    parser.add_argument('--timing', '-tm', help="print timing information", action='store_true')
    parser.add_argument('--c++', help="use C++ implementation", action='store_true')
    parser.add_argument('--cuda', '-cu', help="use CUDA implementation", action='store_true')

    # Output options
    parser.add_argument('--outfolder', '-of',
                        help="write results to folder eg -of=/full/folder/path (default is ./_results_ )")
    parser.add_argument('--fulloutput', '-f',
                        help="print epsilon, sampling steps and acceptence rates after each population",
                        action='store_true')
    parser.add_argument('--save', '-s', help="no backup after each population", action='store_true')
    parser.add_argument('--debug', '-db', help="set the debug mode", action='store_true')

    # Simulate options
    parser.add_argument('--simulate', '-S',
                        help="simulate the model over the range of timepoints, using paramters sampled from the priors")

    # Design option
    parser.add_argument('--design', '-D', help="run ABC-SysBio in design mode", action='store_true')

    # Plotting options
    parser.add_argument('--diagnostic', '-d', help="no printing of diagnostic plots", action='store_true')
    parser.add_argument('--timeseries', '-t',
                        help="no plotting of simulation results after each population", action='store_true')
    parser.add_argument('--plotdata', '-p', help="no plotting of given data points", action='store_true')

    # custom options
    parser.add_argument('--custd', nargs='?', const="customABC", help="Custom distance function")
    parser.add_argument('--custk', action='store_true', help="Custom kernel")

    args = parser.parse_args()

    diagnostic = True
    pickling = True
    plot = True
    plotTimeSeries = True
    simulate = False
    design = False
    full = False
    usesbml = True
    seed = None
    timing = False
    fname = "_results_"
    custom_kernel = False
    custom_distance = False
    use_cuda = False
    use_cudamg = False
    ngpu = 1
    use_c = False
    full_debug = False

    if args.diagnostic:
        diagnostic = False
    if args.save:
        pickling = False
    if args.timeseries:
        plotTimeSeries = False
    if args.plotdata:
        plot = False

    if args.simulate:
        simulate = True
    if args.design:
        design = True
    if args.fulloutput:
        full = True
    if args.timing:
        timing = True
    if args.cuda:
        use_cuda = True

    if args.localcode:
        usesbml = False
    if args.setseed:
        seed = int(args.setseed)
    if args.outfolder:
        fname = args.outfolder

    if args.infile:
        input_file = args.infile
    else:
        sys.exit("No input_file is given!\n\nUse: \n\t-i 'inputfile' \nor: \n\t--infile 'inputfile' \n ")

    if args.custk:
        custom_kernel = True
    if args.custd:
        custom_distance = args.custd

    # Check for invalid combinations of arguments
    if use_cuda and use_c:
        sys.exit("specified both c++ and CUDA")
    if design and simulate:
        sys.exit("specified both design and simulate")

    # parse the input file
    mode = 0
    if simulate:
        mode = 1
    if design:
        mode = 2
    info_new = parse_info.AlgorithmInfo(input_file, mode)

    info_new.print_info()

    # Check that we have libSBML if it is requested
    if usesbml:
        try:
            import libsbml
        except ImportError:
            sys.exit("ABORT: libSBML required for SBML parsing. Please install libSBML")

        from cudasim import ParseAndWrite

    # Check that we can import scipy if we have ODE models
    o = re.compile('ODE')
    for m in range(info_new.nmodels):
        if o.search(info_new.type[m]):
            try:
                from scipy.integrate.odepack import odeint
            except ImportError:
                sys.exit("ABORT: scipy required for ODE modelling. Please install scipy")
            break

    # Check that we have cuda-sim installed
    if use_cuda:
        try:
            import cudasim
        except ImportError:
            sys.exit("ABORT: cudasim required for running on CUDA GPUs. Please install cuda-sim")

    # set the random seeds
    if seed is not None:
        print "#### Seeding random number generator : ", seed
        numpy.random.seed(seed)

    # Check the information is correct for simulation or inference
    modelCorrect = False
    if usesbml:
        integration_type = []

        if use_cuda or use_cudamg:
            for i in range(len(info_new.type)):
                integration_type.append(info_new.type[i] + ' CUDA')
        elif use_c:
            for i in range(len(info_new.type)):
                if info_new.type[i] == "SDE":
                    info_new.type[i] = "EulerSDE"
                integration_type.append(info_new.type[i] + ' C')
        else:
            for i in range(len(info_new.type)):
                integration_type.append(info_new.type[i] + ' Python')

        try:
            ParseAndWrite.parse_and_write(info_new.source, integration_type, info_new.name, input_path="",
                                          output_path="")
        except AttributeError:
            # If something goes wrong, the first method that gets called on the Parser's self.sbmlModel will throw
            # an AttributeError
            print "\n#################\n Could not parse the provided SBML file(s). Check the following options:"
            print "\n -provided file names correct?"
            print "\n -input arguments correct?"
            print "\n -SBML files correctly defined and in local directory?"
            sys.exit()

        if not simulate:
            modelCorrect, message = checkInputArguments.check_input_abc(info_new, fname, custom_distance, design)
        else:
            modelCorrect, message = checkInputArguments.check_input_simulation(info_new)
    else:
        info_new.source = None
        if not simulate:
            modelCorrect, message = checkInputArguments.check_input_abc(info_new, fname, custom_distance, design)
        else:
            modelCorrect, message = checkInputArguments.check_input_simulation(info_new)

    if not modelCorrect:
        print message
        sys.exit()

    # create a list of model objects from the information we have
    models = []
    for i in range(info_new.modelnumber):
        if use_cuda:
            from cudasim.solvers.cuda import model_cu
            new_model = model_cu.CudaModel(name=info_new.name[i], nspecies=info_new.nspecies[i],
                                           nparameters=info_new.nparameters[i],
                                           prior=info_new.prior[i], x0prior=info_new.x0prior[i],
                                           source=info_new.name[i], integration=info_new.type[i], fit=info_new.fit[i],
                                           dt=info_new.dt, beta=info_new.beta, timepoints=info_new.times,
                                           logp=info_new.logp[i])
        elif use_cudamg:
            from cudasim.solvers.cuda import model_mg_cu
            new_model = model_mg_cu.CudaModel(name=info_new.name[i], nspecies=info_new.nspecies[i],
                                              nparameters=info_new.nparameters[i],
                                              prior=info_new.prior[i], x0prior=info_new.x0prior[i],
                                              source=info_new.name[i], integration=info_new.type[i],
                                              fit=info_new.fit[i],
                                              dt=info_new.dt, beta=info_new.beta, timepoints=info_new.times,
                                              logp=info_new.logp[i], ngpu=ngpu)
        elif use_c:
            new_model = model_c.Model(name=info_new.name[i], nspecies=info_new.nspecies[i],
                                      nparameters=info_new.nparameters[i],
                                      prior=info_new.prior[i], x0prior=info_new.x0prior[i],
                                      source=info_new.name[i], integration=info_new.type[i], fit=info_new.fit[i],
                                      dt=info_new.dt, beta=info_new.beta, initstep=1e-6, relative_error=info_new.rtol,
                                      absolute_error=info_new.atol,
                                      logp=info_new.logp[i])

        else:
            new_model = model_py.Model(name=info_new.name[i], nspecies=info_new.nspecies[i],
                                       nparameters=info_new.nparameters[i],
                                       prior=info_new.prior[i], x0prior=info_new.x0prior[i],
                                       source=info_new.name[i], integration=info_new.type[i], fit=info_new.fit[i],
                                       dt=info_new.dt, atol=info_new.atol, rtol=info_new.rtol, logp=info_new.logp[i])

        models.append(new_model)

    # create a data object
    data_new = data.Data(info_new.times, info_new.data)

    # IO
    if simulate or design:
        io = input_output.InputOutput(fname, info_new.restart, diagnostic, plotTimeSeries, havedata=False)
        io.create_output_folders(info_new.name, info_new.particles, pickling, simulate)
    else:
        io = input_output.InputOutput(fname, info_new.restart, diagnostic, plotTimeSeries, havedata=plot)
        io.create_output_folders(info_new.name, info_new.particles, pickling, simulate)

    if plot:
            io.plot_data(data_new)

    # batch size
    nbatch = 10
    if use_cuda:
        nbatch = 25000
    if use_cudamg:
        nbatch = 25000 * ngpu

    # Do ABC SMC
    debug = 0
    if full:
        debug = 1
    if full_debug:
        debug = 2

    # set the required distance and kernel functions
    distancefn = euclidian.euclidian_distance
    kernelfn = kernels.get_kernel
    kernelpdffn = kernels.get_parameter_kernel_pdf
    perturbfn = kernels.perturb_particle

    if custom_distance:
        customABC = __import__(custom_distance)
        distancefn = customABC.distance

    if custom_kernel:
        import customABC
        kernelfn = customABC.getKernel
        kernelpdffn = customABC.getPdfParameterKernel
        perturbfn = customABC.perturbParticle

    # instantiate the Abcsmc algorithm class
    algorithm = abcsmc.Abcsmc(models, info_new.particles, info_new.modelprior, data=data_new, beta=info_new.beta,
                              nbatch=nbatch,
                              model_kernel=info_new.modelkernel, debug=debug, timing=timing, distancefn=distancefn,
                              kernel_type=info_new.kernel, kernelfn=kernelfn,
                              kernelpdffn=kernelpdffn, perturbfn=perturbfn)

    if not simulate:
        if len(info_new.final_epsilon) == 0:
            # Manual epsilon

            # fill data from disk if required
            if info_new.restart:
                algorithm.fill_values(io.read_pickled(fname))

            # transpose epsilon so it is epsilon[npop][ndistance]
            tepsilon = info_new.epsilon.transpose()

            algorithm.run_fixed_schedule(tepsilon, io)

        else:
            # Automatic epsilon
            if info_new.restart:
                print "Restart not implemented for automated epsilon"
                sys.exit()

            algorithm.run_automated_schedule(info_new.final_epsilon, info_new.alpha, io)

    else:

        # run simulations only
        algorithm.run_simulations(io)
